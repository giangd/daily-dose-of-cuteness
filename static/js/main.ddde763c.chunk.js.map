{"version":3,"sources":["Components/Heading.js","Components/Media.js","Components/MasonryImages.js","Components/HomePage.js","Components/NavBar.js","App.js","index.js"],"names":["Wrapper","styled","div","props","headingText","subText","currentPage","className","MediaWrapper","Image","img","Video","video","LinkOverlay","HeartOverlay","Overlay","LinkButton","a","LinkIcon","FiExternalLink","LinkText","p","HeartButton","button","HeartOutlineIcon","BsHeart","HeartFilledIcon","BsHeartFill","handleHeartClick","state","overlayContent","href","this","redditLink","subreddit","onClick","isHeartClicked","type","src","url","alt","autoPlay","loop","poster","posterUrl","React","Component","MasonryStyles","dataLength","mediaObjects","length","next","fetchBasedOnWeights","hasMore","style","overflow","breakpointCols","columnClassName","map","mediaObject","index","key","id","CustomButton","Button","color","Row","Col","xs","value","handleCategoryClick","NavBar","NavCol","NavButton","HomeIcon","BsHouseDoorFill","HomeHoveredIcon","HeartIcon","HeartHoveredIcon","Container","height","onMouseEnter","handleMouseEnterHome","onMouseLeave","handleMouseLeaveHome","handleClickHome","isHomeHovered","handleMouseEnterHeart","handleMouseLeaveHeart","handleClickHeart","isHeartHovered","subreddits","dogs","cats","reptiles","birds","everything","GlobalStyle","createGlobalStyle","App","e","setState","prevState","newNavData","cloneDeep","navData","newMediaObjects","heartedMedia","categories","getInitialSubredditData","target","newCategories","category","name","weight","normalizedWeight","undefined","afterId","getNormalizedSubredditData","categoryName","sum","subredditName","subredditObj","subredditsToFetchFrom","numImagesFetched","random","Math","namesIndex","names","Object","keys","chosenName","numImages","fetchImageFromSubreddit","apiCall","config","params","raw_json","limit","after","crossdomain","axios","get","then","response","arrayOfPostObjects","data","Error","children","postObject","postHint","post_hint","width","permalink","secure_media","oembed","thumbnail_url","thumbnail_height","thumbnail_width","media","reddit_video","fallback_url","preview","images","source","push","concat","catch","message","console","error","log","handleClickMediaHeart","splice","localStorage","setItem","JSON","stringify","moreOrLessText","newHeartedMedia","filter","element","oldPercent","round","newPercent","newAlertText","alertText","showAlert","setTimeout","getItem","parse","Alert","variant","position","left","right","zIndex","marginLeft","marginRight","padding","fluid","Heading","MasonryImages","renderMasonryImages","HomePage","renderHomePage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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,kBACA,kBACA,aACA,WACA,cACA,OACA,WACA,MACA,cACA,QACA,wBACA,WACA,WAEJC,KAAM,CACF,WACA,OACA,cACA,SACA,kBACA,mBACA,eACA,aACA,UACA,cACA,WACA,kBACA,QACA,MACA,UACA,oBACA,aACA,UACA,UACA,cACA,aACA,UACA,iBACA,wBAEJC,SAAU,CACN,iBACA,aACA,UACA,gBACA,SACA,YACA,cACA,eACA,SACA,cACA,UACA,gBACA,WACA,oBACA,QACA,UACA,aACA,cACA,iBACA,YACA,SACA,uBAEJC,MAAO,CACH,cACA,mBACA,UACA,WACA,cACA,OACA,QACA,OACA,WACA,eACA,WACA,UACA,gBACA,UACA,UACA,UACA,eACA,kBACA,kBACA,gBACA,UACA,YACA,QACA,eACA,cACA,kBAEJC,WAAY,CACR,mBACA,mBACA,oBACA,gBACA,iBACA,cACA,aACA,gBACA,oBACA,uBACA,sBACA,qBACA,eACA,uBACA,iBACA,oBACA,iBACA,oBACA,iBACA,kBACA,MACA,iBACA,kBACA,kBACA,gBACA,WACA,UACA,cACA,UACA,eACA,qBACA,kBACA,cAIFC,GAAcC,YAAH,MA6dFC,G,kDAjdX,WAAYhG,GAAQ,IAAD,8BACf,cAAMA,IA8BV+E,qBAAuB,SAACkB,GACpB,EAAKC,UAAS,SAACC,GACX,IAAMC,EAAaC,IAAUF,EAAUG,SAEvC,OADAF,EAAWjB,eAAgB,EACpB,CACHmB,QAASF,OApCF,EAwCnBnB,qBAAuB,SAACgB,GACpB,EAAKC,UAAS,SAACC,GACX,IAAMC,EAAaC,IAAUF,EAAUG,SAEvC,OADAF,EAAWjB,eAAgB,EACpB,CACHmB,QAASF,OA7CF,EAiDnBlB,gBAAkB,SAACe,GACf,EAAKC,SAAS,CAAEpD,aAAc,GAAI3C,YAAa,cAlDhC,EAoDnBiF,sBAAwB,SAACa,GACrB,EAAKC,UAAS,SAACC,GACX,IAAMC,EAAaC,IAAUF,EAAUG,SAEvC,OADAF,EAAWb,gBAAiB,EACrB,CACHe,QAASF,OAzDF,EA6DnBf,sBAAwB,SAACY,GA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","file":"static/js/main.ddde763c.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    h1 {\n        margin-top: 20px;\n    }\n    p {\n        margin-top: 10px;\n        margin-bottom: 30px;\n    }\n`;\n\nexport default function (props) {\n    let headingText;\n    let subText;\n\n    switch (props.currentPage) {\n        case \"everything\":\n            headingText = \"Everything\";\n            subText = \"✨Everything happy and cute🎈\";\n            break;\n        case \"dogs\":\n            headingText = \"Dogs\";\n            subText =\n                \"🐕‍🦺“Scratch a dog and you’ll find a permanent job.” – Franklin P. Jones🐶\";\n            break;\n        case \"cats\":\n            headingText = \"Cats\";\n            subText =\n                \"🐈“Time spent with cats is never wasted.” – Sigmund Freud😸\";\n            break;\n        case \"reptiles\":\n            headingText = \"Reptiles\";\n            subText = \"🐍“Hissss hisssss hiss hissssss.” – A Snake🐍\";\n            break;\n        case \"birds\":\n            headingText = \"Birds\";\n            subText =\n                \"🐦“When birds burp, it must taste like bugs.” – Bill Watterson🐣\";\n            break;\n        case \"heartedPage\":\n            headingText = \"Things You've Hearted\";\n            subText = \"✨Everything happy and cute🎈\";\n            break;\n        default:\n    }\n    return (\n        <Wrapper>\n            <h1 className=\"display-4 text-center\">{headingText}</h1>\n            <p className=\"lead text-center\">{subText}</p>\n        </Wrapper>\n    );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { FiExternalLink } from \"react-icons/fi\";\n\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\n\n// can delete, wanted to see if this could fix the overlay gradient from overflowing\n// maybe don't delete, the overflow issue was fixed somewhere\nconst MediaWrapper = styled.div``;\n\nconst Image = styled.img`\n    position: relative;\n    width: 100%;\n    height: auto;\n    z-index: -1;\n`;\n\nconst Video = styled.video`\n    position: relative;\n    width: 100%;\n    height: auto;\n    z-index: -1;\n`;\n\nconst LinkOverlay = styled.div`\n    position: absolute;\n    z-index: 0;\n    bottom: 2px;\n    /* color: red; */\n    color: black;\n    display: none;\n`;\n\nconst HeartOverlay = styled.div`\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    /* -webkit-transform: translate(-50%, -50%); */\n    transform: translate(-50%, -50%);\n\n    z-index: 0;\n    color: black;\n    display: none;\n`;\n\nconst Overlay = styled.div`\n    position: relative;\n    height: auto;\n    display: flex;\n    justify-content: center;\n\n    /* overflow: hidden; */\n\n    &:hover {\n        background: rgb(0, 0, 0);\n        /* opacity: 0.9; */\n        background: linear-gradient(\n            0deg,\n            rgba(0, 0, 0, 0.15) 0%,\n            rgba(0, 0, 0, 0.15) 100%\n        );\n\n        ${LinkOverlay} {\n            display: block;\n        }\n\n        ${HeartOverlay} {\n            display: block;\n        }\n    }\n`;\n\nconst LinkButton = styled.a`\n    position: relative;\n    width: auto;\n    height: auto;\n    background-color: Transparent;\n    border: none;\n    /* overflow: hidden; */\n\n    &:link {\n        color: white;\n    }\n    &:visited {\n        color: white;\n    }\n    &:hover {\n        color: white;\n        text-decoration: none;\n    }\n    &:focus {\n        color: white;\n    }\n    &:active {\n        color: white;\n    }\n`;\n\nconst LinkIcon = styled(FiExternalLink)`\n    position: relative;\n    height: 30px;\n    width: 30px;\n    margin-left: 10px;\n    float: right;\n`;\n\nconst LinkText = styled.p`\n    position: relative;\n    float: left;\n    margin-top: 6px;\n`;\n\nconst HeartButton = styled.button`\n    position: relative;\n    width: 50px;\n    height: 50px;\n    background-color: Transparent;\n    border: none;\n    float: right;\n    &:active {\n        outline: 0;\n    }\n    &:focus {\n        outline: 0;\n    }\n    &:hover {\n        outline: 0;\n        stroke: red !important;\n    }\n`;\n\nconst HeartOutlineIcon = styled(BsHeart)`\n    position: relative;\n    opacity: 100;\n    width: 100%;\n    height: auto;\n\n    fill: white;\n    &:hover {\n        fill: red;\n    }\n`;\n\nconst HeartFilledIcon = styled(BsHeartFill)`\n    position: relative;\n    opacity: 100;\n    width: 100%;\n    height: auto;\n\n    fill: red;\n`;\n\nexport default class extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            ...props,\n            // videoRef: React.createRef(),\n            // isHeartClicked: false,\n        };\n    }\n\n    // handleClick = () => {\n    //     console.log(\"inside handleClick\");\n    //     // if (this.props.videoRef.current.paused) {\n    //     //     this.props.videoRef.current.play();\n    //     // } else {\n    //     //     this.props.videoRef.current.pause();\n    //     // }\n    // };\n\n    handleHeartClick = () => {\n        this.props.handleHeartClick(this.props);\n    };\n\n    render() {\n        const overlayContent = (\n            <>\n                <LinkOverlay>\n                    <LinkButton\n                        href={`https://reddit.com${this.props.redditLink}`}\n                    >\n                        <LinkText>{this.props.subreddit}</LinkText>\n                        <LinkIcon />\n                    </LinkButton>\n                </LinkOverlay>\n                <HeartOverlay onClick={this.handleHeartClick}>\n                    <HeartButton>\n                        {this.props.isHeartClicked ? (\n                            <HeartFilledIcon></HeartFilledIcon>\n                        ) : (\n                            <HeartOutlineIcon></HeartOutlineIcon>\n                        )}\n                        {/* <HeartIcon\n                            clicked={this.props.isHeartClicked.toString()}\n                        /> */}\n                    </HeartButton>\n                </HeartOverlay>\n            </>\n        );\n\n        switch (this.props.type) {\n            case \"image\":\n            case \"gif\":\n                return (\n                    <MediaWrapper>\n                        <Overlay>\n                            {overlayContent}\n                            <Image src={this.props.url} alt=\"\"></Image>\n                        </Overlay>\n                    </MediaWrapper>\n                );\n            case \"reddit video\":\n                return (\n                    <MediaWrapper>\n                        <Overlay>\n                            {overlayContent}\n                            <Video\n                                // ref={this.props.videoRef}\n                                autoPlay=\"autoplay\"\n                                loop\n                                poster={this.props.posterUrl}\n                            >\n                                <source src={this.props.url}></source>\n                            </Video>\n                        </Overlay>\n                    </MediaWrapper>\n                );\n            case \"self\":\n            case \"link\":\n            default:\n                return \"\";\n        }\n    }\n}\n","import React from \"react\";\nimport Media from \"./Media\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport styled from \"styled-components\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Masonry from \"react-masonry-css\";\n\nconst MasonryStyles = styled.div`\n    /* whole grid */\n    .masonry-grid {\n        display: -webkit-box; /* Not needed if autoprefixing */\n        display: -ms-flexbox; /* Not needed if autoprefixing */\n        display: flex;\n        width: 100%;\n        margin: 0 auto;\n    }\n\n    /* grid columns */\n    .masonry-grid_column {\n        background-clip: padding-box;\n    }\n\n    /* individual items */\n    .masonry-grid_column > * {\n    }\n`;\n\nexport default function (props) {\n    return (\n        <>\n            {props.currentPage === \"heartedPage\" ? null : (\n                <InfiniteScroll\n                    dataLength={props.mediaObjects.length}\n                    next={props.fetchBasedOnWeights}\n                    hasMore={true}\n                    style={{ overflow: \"hidden\" }}\n                ></InfiniteScroll>\n            )}\n\n            <MasonryStyles>\n                <Masonry\n                    breakpointCols={3}\n                    className=\"masonry-grid\"\n                    columnClassName=\"masonry-grid_column\"\n                >\n                    {props.mediaObjects.map((mediaObject, index) => {\n                        return (\n                            <Media\n                                {...mediaObject}\n                                handleHeartClick={props.handleHeartClick}\n                                index={index}\n                                key={`${mediaObject.id}`}\n                            />\n                        );\n                    })}\n                </Masonry>\n            </MasonryStyles>\n        </>\n    );\n}\n","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst CustomButton = styled(Button)`\r\n    border-color: ${(props) => props.color} !important;\r\n    /* color: ${(props) => props.color}; */\r\n    background: ${(props) => props.color} !important;\r\n    color: white;\r\n\r\n    &:hover {\r\n        color: rgb(230, 230, 230);\r\n    }\r\n    &:active {\r\n        background: ${(props) => props.color} !important;\r\n    }\r\n    &:focus {\r\n        box-shadow: none !important;\r\n    }\r\n`;\r\nconst Wrapper = styled.div`\r\n    h1 {\r\n        margin-top: 20px;\r\n    }\r\n    p {\r\n        margin-top: 10px;\r\n        margin-bottom: 30px;\r\n    }\r\n`;\r\n\r\nexport default function (props) {\r\n    return (\r\n        <Wrapper>\r\n            <Row>\r\n                <Col>\r\n                    <h1 className=\"display-4 text-center\">\r\n                        Daily Dose of Cuteness\r\n                    </h1>\r\n                    <p className=\"lead text-center\">\r\n                        🌈 A few cute pictures a day keeps the sadness away 🤗\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className=\"text-center\">\r\n                <Col></Col>\r\n                <Col xs={3}>\r\n                    <CustomButton\r\n                        value=\"everything\"\r\n                        // variant=\"outline-primary\"\r\n                        color={\"#138715\"}\r\n                        onClick={props.handleCategoryClick}\r\n                    >\r\n                        EVERYTHING\r\n                    </CustomButton>\r\n                    <CustomButton\r\n                        value=\"dogs\"\r\n                        // variant=\"outline-primary\"\r\n                        color={\"#304CC8\"}\r\n                        onClick={props.handleCategoryClick}\r\n                    >\r\n                        Dogs\r\n                    </CustomButton>\r\n                    <CustomButton\r\n                        value=\"cats\"\r\n                        // variant=\"outline-primary\"\r\n                        color={\"#4E2388\"}\r\n                        onClick={props.handleCategoryClick}\r\n                    >\r\n                        Cats\r\n                    </CustomButton>\r\n                    <CustomButton\r\n                        value=\"reptiles\"\r\n                        // variant=\"outline-primary\"\r\n                        color={\"#DA9101\"}\r\n                        onClick={props.handleCategoryClick}\r\n                    >\r\n                        Reptiles\r\n                    </CustomButton>\r\n                    <CustomButton\r\n                        value=\"birds\"\r\n                        // variant=\"outline-primary\"\r\n                        color={\"#CA302F\"}\r\n                        onClick={props.handleCategoryClick}\r\n                    >\r\n                        Birds\r\n                    </CustomButton>\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n        </Wrapper>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { BsHeartFill, BsHouseDoorFill } from \"react-icons/bs\";\r\n\r\nconst NavBar = styled.div`\r\n    position: fixed;\r\n    background-color: #fff;\r\n    border-color: #fff;\r\n    height: 100vh;\r\n    width: 80px;\r\n    left: 0px;\r\n    box-shadow: 3px 0 10px -5px #c1c1c1;\r\n    padding-top: 12px;\r\n    z-index: 1000;\r\n`;\r\n\r\nconst NavCol = styled(Col)`\r\n    & * {\r\n        margin-bottom: 12px;\r\n    }\r\n`;\r\n\r\nconst NavButton = styled.button`\r\n    position: relative;\r\n    width: 50px;\r\n    height: 50px;\r\n    background-color: Transparent;\r\n    border: none;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    &:active {\r\n        outline: 0;\r\n    }\r\n    &:focus {\r\n        outline: 0;\r\n    }\r\n    &:hover {\r\n        outline: 0;\r\n    }\r\n`;\r\n\r\nconst HomeIcon = styled(BsHouseDoorFill)`\r\n    width: 45px;\r\n    height: auto;\r\n    stroke: ${(props) => props.color};\r\n    fill: ${(props) => props.color};\r\n`;\r\nconst HomeHoveredIcon = styled(BsHouseDoorFill)`\r\n    width: 45px;\r\n    height: auto;\r\n    stroke: ${(props) => props.color};\r\n    fill: ${(props) => props.color};\r\n`;\r\n\r\nconst HeartIcon = styled(BsHeartFill)`\r\n    width: 45px;\r\n    height: auto;\r\n    stroke: ${(props) => props.color};\r\n    fill: ${(props) => props.color};\r\n`;\r\nconst HeartHoveredIcon = styled(BsHeartFill)`\r\n    width: 45px;\r\n    height: auto;\r\n    stroke: ${(props) => props.color};\r\n    fill: ${(props) => props.color};\r\n`;\r\n\r\nexport default function (props) {\r\n    // console.log(props);\r\n    return (\r\n        <NavBar>\r\n            <Container>\r\n                <Row style={{ height: \"100vh\" }}>\r\n                    <NavCol>\r\n                        <NavButton\r\n                            onMouseEnter={props.handleMouseEnterHome}\r\n                            onMouseLeave={props.handleMouseLeaveHome}\r\n                            onClick={props.handleClickHome}\r\n                        >\r\n                            {props.isHomeHovered ? (\r\n                                <HomeHoveredIcon color={\"rgb(255, 0, 0)\"} />\r\n                            ) : (\r\n                                <HomeIcon color={\"rgb(150,150,150)\"} />\r\n                            )}\r\n                        </NavButton>\r\n                        <NavButton\r\n                            onMouseEnter={props.handleMouseEnterHeart}\r\n                            onMouseLeave={props.handleMouseLeaveHeart}\r\n                            onClick={props.handleClickHeart}\r\n                        >\r\n                            {props.isHeartHovered ? (\r\n                                <HeartHoveredIcon color={\"rgb(255,0,0)\"} />\r\n                            ) : (\r\n                                <HeartIcon color={\"rgb(150,150,150)\"} />\r\n                            )}\r\n                        </NavButton>\r\n                    </NavCol>\r\n                </Row>\r\n            </Container>\r\n        </NavBar>\r\n    );\r\n}\r\n","import React from \"react\";\nimport Heading from \"./Components/Heading\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport MasonryImages from \"./Components/MasonryImages\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport HomePage from \"./Components/HomePage\";\n\nimport NavBar from \"./Components/NavBar\";\nimport Alert from \"react-bootstrap/Alert\";\nconst subreddits = {\n    dogs: [\n        \"dogs_getting_dogs\",\n        \"AirSwimming\",\n        \"dogswithjobs\",\n        \"slammywhammies\",\n        \"BeachDogs\",\n        \"beagle\",\n        \"bernesemountaindogs\",\n        \"blurrypicturesofdogs\",\n        \"BorderCollie\",\n        \"Boxer\",\n        \"Bulldogs\",\n        \"corgi\",\n        \"dogpictures\",\n        \"dogswearinghats\",\n        \"germanshepherds\",\n        \"Greyhounds\",\n        \"labrador\",\n        \"lookatmydog\",\n        \"mutt\",\n        \"pitbulls\",\n        \"pug\",\n        \"rarepuppers\",\n        \"shiba\",\n        \"WhatsWrongWithYourDog\",\n        \"woof_irl\",\n        \"Zoomies\",\n    ],\n    cats: [\n        \"MEOW_IRL\",\n        \"cats\",\n        \"Catspotting\",\n        \"Kitten\",\n        \"FromKittenToCat\",\n        \"illegallybigcats\",\n        \"SleepingCats\",\n        \"grumpycats\",\n        \"kittens\",\n        \"TruckerCats\",\n        \"cutecats\",\n        \"catreactiongifs\",\n        \"kitty\",\n        \"cat\",\n        \"kitties\",\n        \"IllegallySmolCats\",\n        \"SeniorCats\",\n        \"wetcats\",\n        \"catpics\",\n        \"catpictures\",\n        \"kittengifs\",\n        \"CatGifs\",\n        \"SupermodelCats\",\n        \"blurrypicturesofcats\",\n    ],\n    reptiles: [\n        \"BeardedDragons\",\n        \"Chameleons\",\n        \"iguanas\",\n        \"leopardgeckos\",\n        \"snakes\",\n        \"Tortoises\",\n        \"TurtleFacts\",\n        \"CrestedGecko\",\n        \"geckos\",\n        \"herpetology\",\n        \"Lizards\",\n        \"MonitorLizard\",\n        \"reptiles\",\n        \"snakeswearinghats\",\n        \"Sneks\",\n        \"turtles\",\n        \"ballpython\",\n        \"GeckoSmiles\",\n        \"SnakesWithHats\",\n        \"Tortoises\",\n        \"turtle\",\n        \"turtlesonalligators\",\n    ],\n    birds: [\n        \"ALLTHEBIRDS\",\n        \"BackYardChickens\",\n        \"birding\",\n        \"birdpics\",\n        \"birdsofprey\",\n        \"duck\",\n        \"geese\",\n        \"Owls\",\n        \"PetDoves\",\n        \"birdwatching\",\n        \"chickens\",\n        \"Conures\",\n        \"DivorcedBirds\",\n        \"Finches\",\n        \"parrots\",\n        \"penguin\",\n        \"babyduckgifs\",\n        \"BirdPhotography\",\n        \"BirdsBeingDicks\",\n        \"birdswitharms\",\n        \"budgies\",\n        \"cockatiel\",\n        \"crows\",\n        \"hummingbirds\",\n        \"PartyParrot\",\n        \"ShoebillStorks\",\n    ],\n    everything: [\n        \"AnimalsBeingBros\",\n        \"babyelephantgifs\",\n        \"AnimalsBeingFunny\",\n        \"AnimalsInHats\",\n        \"animalssmiling\",\n        \"hitmanimals\",\n        \"petsinwigs\",\n        \"AnimalShaming\",\n        \"AnimalsBeingDerps\",\n        \"AnimalsStuckInThings\",\n        \"AnimalsWithoutNecks\",\n        \"Delightfullychubby\",\n        \"FunnyAnimals\",\n        \"tinyanimalsonfingers\",\n        \"AnimalTextGifs\",\n        \"AnimalsBeingJerks\",\n        \"AnimalsFailing\",\n        \"sittinglikehumans\",\n        \"StoppedWorking\",\n        \"TrollingAnimals\",\n        \"aww\",\n        \"CatsAndDogsBFF\",\n        \"Sleepinganimals\",\n        \"unlikelyfriends\",\n        \"ALLTHEANIMALS\",\n        \"awwakeup\",\n        \"bigboye\",\n        \"hardcoreaww\",\n        \"Teefers\",\n        \"brushybrushy\",\n        \"NatureIsFuckingLit\",\n        \"Pet_Renaissance\",\n        \"TinyUnits\",\n    ],\n};\n\nconst GlobalStyle = createGlobalStyle`\n    * {\n        margin: 0px;\n        padding: 0px;\n    }\n\n    &.app {\n        position: relative;\n    }\n`;\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mediaObjects: [], // array of objects\n            currentPage: \"homePage\",\n            categories: {},\n            heartedMedia: [],\n            alertText: undefined,\n            navData: {\n                isHeartHovered: false,\n                isHomeHovered: false,\n                handleMouseEnterHome: this.handleMouseEnterHome,\n                handleMouseLeaveHome: this.handleMouseLeaveHome,\n                handleMouseEnterHeart: this.handleMouseEnterHeart,\n                handleMouseLeaveHeart: this.handleMouseLeaveHeart,\n                handleClickHome: this.handleClickHome,\n                handleClickHeart: this.handleClickHeart,\n            },\n        };\n    }\n    // this\n\n    componentDidMount() {\n        if (localStorage.getItem(\"heartedMedia\") !== null) {\n            this.setState({\n                heartedMedia: JSON.parse(localStorage[\"heartedMedia\"]),\n            });\n        }\n    }\n\n    // NavBar\n    handleMouseEnterHome = (e) => {\n        this.setState((prevState) => {\n            const newNavData = cloneDeep(prevState.navData);\n            newNavData.isHomeHovered = true;\n            return {\n                navData: newNavData,\n            };\n        });\n    };\n    handleMouseLeaveHome = (e) => {\n        this.setState((prevState) => {\n            const newNavData = cloneDeep(prevState.navData);\n            newNavData.isHomeHovered = false;\n            return {\n                navData: newNavData,\n            };\n        });\n    };\n    handleClickHome = (e) => {\n        this.setState({ mediaObjects: [], currentPage: \"homePage\" });\n    };\n    handleMouseEnterHeart = (e) => {\n        this.setState((prevState) => {\n            const newNavData = cloneDeep(prevState.navData);\n            newNavData.isHeartHovered = true;\n            return {\n                navData: newNavData,\n            };\n        });\n    };\n    handleMouseLeaveHeart = (e) => {\n        this.setState((prevState) => {\n            const newNavData = cloneDeep(prevState.navData);\n            newNavData.isHeartHovered = false;\n            return {\n                navData: newNavData,\n            };\n        });\n    };\n    handleClickHeart = (e) => {\n        const newMediaObjects = cloneDeep(this.state.heartedMedia);\n        this.setState(\n            {\n                currentPage: \"heartedPage\",\n                mediaObjects: newMediaObjects,\n            },\n            () => {}\n        );\n    };\n\n    // HomePage\n    handleCategoryClick = (e) => {\n        this.setState(\n            {\n                categories: this.getInitialSubredditData(),\n                mediaObjects: [],\n                currentPage: `${e.target.value}`,\n            },\n            () => {\n                this.fetchBasedOnWeights();\n            }\n        );\n    };\n\n    // this, Media\n    getInitialSubredditData = () => {\n        const newCategories = cloneDeep(this.state.categories);\n        for (const category in subreddits) {\n            newCategories[category] = {};\n            for (const name of subreddits[category]) {\n                newCategories[category][name] = {\n                    weight: 1,\n                    normalizedWeight: undefined,\n                    afterId: undefined,\n                };\n            }\n        }\n\n        const normalizedInitialData = this.getNormalizedSubredditData(\n            newCategories\n        );\n\n        return normalizedInitialData;\n    };\n    getNormalizedSubredditData = (categories) => {\n        for (const categoryName in categories) {\n            let sum = 0;\n            for (const subredditName in categories[categoryName]) {\n                const subredditObj = categories[categoryName][subredditName];\n                sum += subredditObj.weight;\n            }\n\n            for (const subredditName in categories[categoryName]) {\n                const subredditObj = categories[categoryName][subredditName];\n                subredditObj.normalizedWeight = subredditObj.weight / sum;\n            }\n        }\n\n        return categories;\n    };\n    fetchBasedOnWeights = () => {\n        const maxImages = 25;\n\n        const subredditsToFetchFrom = {};\n        for (\n            let numImagesFetched = 0;\n            numImagesFetched < maxImages;\n            numImagesFetched++\n        ) {\n            let random = Math.random();\n            let namesIndex = 0;\n            let names = Object.keys(\n                this.state.categories[this.state.currentPage]\n            );\n            let data;\n\n            while (random > 0) {\n                data = this.state.categories[this.state.currentPage][\n                    names[namesIndex]\n                ];\n                random -= data.normalizedWeight;\n                namesIndex++;\n            }\n            namesIndex--;\n\n            let chosenName = names[namesIndex];\n\n            // increment numImages of selected subreddit\n            if (chosenName in subredditsToFetchFrom) {\n                subredditsToFetchFrom[chosenName] = {\n                    namesIndex,\n                    numImages: subredditsToFetchFrom[chosenName].numImages + 1,\n                };\n            } else {\n                subredditsToFetchFrom[chosenName] = {\n                    namesIndex,\n                    numImages: 1,\n                };\n            }\n        }\n\n        for (const name in subredditsToFetchFrom) {\n            this.fetchImageFromSubreddit(\n                name,\n                subredditsToFetchFrom[name].numImages\n            );\n        }\n    };\n    fetchImageFromSubreddit = (name, numImages) => {\n        const apiCall = `https://www.reddit.com/r/${name}/hot.json`;\n        const config = {\n            params: {\n                // t: \"all\",\n                raw_json: 1,\n                limit: numImages - 1,\n                after: `${\n                    this.state.categories[this.state.currentPage][name].afterId\n                }`,\n            },\n            crossdomain: true,\n        };\n\n        axios\n            .get(apiCall, config)\n            .then((response) => {\n                let afterId = response.data.data.after;\n\n                // if any of the subreddits have this afterId, throw new Error(\"Error\");\n                for (const name in this.state.categories[\n                    this.state.currentPage\n                ]) {\n                    if (\n                        this.state.categories[this.state.currentPage][name]\n                            .afterId === afterId\n                    ) {\n                        throw new Error(\"duplicate after ids found\");\n                    }\n                }\n\n                let arrayOfPostObjects;\n                arrayOfPostObjects = [...response.data.data.children];\n\n                let mediaObjects = [];\n                for (let postObject of arrayOfPostObjects) {\n                    let postHint = postObject.data.post_hint;\n\n                    // if any of the mediaObjects have this postId, throw error\n                    for (const object of this.state.mediaObjects) {\n                        if (object.id === `${postObject.data.id}`) {\n                            throw new Error(\"duplicate media ids found\");\n                        }\n                    }\n\n                    let mediaObject = {\n                        type: undefined,\n                        id: undefined,\n                        subreddit: undefined,\n                        redditLink: undefined,\n                        url: undefined,\n                        posterUrl: undefined,\n                        height: undefined,\n                        width: undefined,\n                        isHeartClicked: false,\n                    };\n\n                    mediaObject.id = `${postObject.data.id}`;\n                    mediaObject.redditLink = `${postObject.data.permalink}`;\n\n                    switch (postHint) {\n                        case \"rich:video\": // gif\n                            mediaObject.type = \"gif\";\n                            mediaObject.subreddit = `${postObject.data.subreddit}`;\n                            mediaObject.url = `${postObject.data.secure_media.oembed.thumbnail_url}`; // compressed gif, can get uncompressed version\n                            mediaObject.height = `${postObject.data.secure_media.oembed.thumbnail_height}`;\n                            mediaObject.width = `${postObject.data.secure_media.oembed.thumbnail_width}`;\n\n                            break;\n                        case \"hosted:video\": // reddit video\n                            mediaObject.type = \"reddit video\";\n                            mediaObject.subreddit = `${postObject.data.subreddit}`;\n\n                            // mediaObject.url =\n                            // postObject.data.preview.images[0].source.url; // highest resolution, can get lower\n                            mediaObject.url =\n                                postObject.data.media.reddit_video.fallback_url;\n                            mediaObject.posterUrl =\n                                postObject.data.preview.images[0].source.url; // highest resolution, can get lower\n                            mediaObject.height =\n                                postObject.data.media.reddit_video.height;\n                            mediaObject.width =\n                                postObject.data.media.reddit_video.width;\n                            break;\n                        case \"image\": // image\n                            mediaObject.type = \"image\";\n                            mediaObject.subreddit = `${postObject.data.subreddit}`;\n\n                            mediaObject.url =\n                                postObject.data.preview.images[0].source.url; // highest resolution, can get lower\n                            mediaObject.height =\n                                postObject.data.preview.images[0].source.height;\n                            mediaObject.width =\n                                postObject.data.preview.images[0].source.width;\n                            break;\n                        case \"link\":\n                        case \"self\":\n                        default:\n                            continue;\n                    }\n                    mediaObjects.push(mediaObject);\n                }\n\n                const newMediaObjects = cloneDeep(\n                    this.state.mediaObjects\n                ).concat(mediaObjects);\n\n                // update subreddit[index].afterId\n                const newCategories = cloneDeep(this.state.categories);\n\n                newCategories[this.state.currentPage][name].afterId = afterId;\n\n                this.setState({\n                    mediaObjects: newMediaObjects,\n                    categories: newCategories,\n                });\n            })\n\n            .catch((e) => {\n                if (e.message === \"duplicate after ids found\") {\n                } else if (e.message === \"duplicate media ids found\") {\n                } else {\n                    console.error(\"unknown error in fetchImageFromSubreddit:\"); // cont here\n                    console.log(e);\n                    console.log(e.message === \"duplicate media ids found\");\n                }\n            });\n    };\n    handleClickMediaHeart = (mediaObject) => {\n        if (this.state.currentPage === \"heartedPage\") {\n            const newMediaObjects = cloneDeep(this.state.mediaObjects);\n            newMediaObjects.splice(mediaObject.index, 1);\n\n            localStorage.setItem(\n                \"heartedMedia\",\n                JSON.stringify(newMediaObjects)\n            );\n            this.setState({ mediaObjects: newMediaObjects });\n        } else {\n            const newMediaObjects = cloneDeep(this.state.mediaObjects);\n            const subredditName = mediaObject.subreddit;\n            let newCategories = cloneDeep(this.state.categories);\n\n            // update isHeartClicked\n            // update weighting\n            // update heartedMedia\n            let newHeartedMedia = cloneDeep(this.state.heartedMedia);\n            let moreOrLessText;\n            if (this.state.mediaObjects[mediaObject.index].isHeartClicked) {\n                // should unheart\n                newMediaObjects[mediaObject.index].isHeartClicked = false;\n\n                newHeartedMedia = newHeartedMedia.filter((element) => {\n                    return element.id !== newMediaObjects[mediaObject.index].id;\n                });\n\n                newCategories[this.state.currentPage][\n                    subredditName\n                ].weight -= 10;\n\n                moreOrLessText = \"less\";\n            } else {\n                // should heart\n                newMediaObjects[mediaObject.index].isHeartClicked = true;\n\n                newHeartedMedia.push(newMediaObjects[mediaObject.index]);\n\n                newCategories[this.state.currentPage][\n                    subredditName\n                ].weight += 10;\n\n                moreOrLessText = \"more\";\n            }\n\n            const oldPercent = Math.round(\n                newCategories[this.state.currentPage][subredditName]\n                    .normalizedWeight * 100\n            );\n            newCategories = this.getNormalizedSubredditData(newCategories);\n            const newPercent = Math.round(\n                newCategories[this.state.currentPage][subredditName]\n                    .normalizedWeight * 100\n            );\n\n            const newAlertText = `You'll see ${moreOrLessText} things from ${subredditName}! ${oldPercent}% ➜ ${newPercent}%`;\n\n            localStorage.setItem(\n                \"heartedMedia\",\n                JSON.stringify(newHeartedMedia)\n            );\n\n            this.setState(\n                {\n                    mediaObjects: newMediaObjects,\n                    categories: newCategories,\n                    heartedMedia: newHeartedMedia,\n                    alertText: newAlertText,\n                    showAlert: true,\n                },\n                () => {\n                    setTimeout(() => {\n                        if (this.state.alertText === newAlertText) {\n                            this.setState({ showAlert: false });\n                        }\n                    }, 3000);\n                }\n            );\n        }\n    };\n\n    render() {\n        const renderMasonryImages = () => {\n            if (this.state.currentPage !== \"homePage\") {\n                return (\n                    <>\n                        <Row>\n                            <Col>\n                                <Heading\n                                    currentPage={this.state.currentPage}\n                                ></Heading>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <MasonryImages\n                                    {...this.state}\n                                    handleHeartClick={\n                                        this.handleClickMediaHeart\n                                    }\n                                    fetchBasedOnWeights={\n                                        this.fetchBasedOnWeights\n                                    }\n                                ></MasonryImages>\n                            </Col>\n                        </Row>\n                    </>\n                );\n            }\n        };\n\n        const renderHomePage = () => {\n            if (this.state.currentPage === \"homePage\") {\n                return (\n                    <HomePage\n                        handleCategoryClick={this.handleCategoryClick}\n                    ></HomePage>\n                );\n            }\n        };\n\n        return (\n            <div className=\"app\">\n                <GlobalStyle />\n                {this.state.showAlert && (\n                    <Alert\n                        variant=\"primary\"\n                        className=\"text-center\"\n                        style={{\n                            position: \"fixed\",\n                            left: \"0px\",\n                            right: \"0px\",\n                            zIndex: 1,\n                            marginLeft: \"auto\",\n                            marginRight: \"auto\",\n                        }}\n                    >\n                        {this.state.alertText}\n                    </Alert>\n                )}\n\n                <NavBar {...this.state.navData}></NavBar>\n                <div style={{ marginLeft: \"80px\", padding: \"0 50px 0 50px\" }}>\n                    <Container fluid>\n                        <Row>\n                            <Col>\n                                {renderMasonryImages()}\n                                {renderHomePage()}\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}